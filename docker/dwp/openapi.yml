openapi: 3.0.0
info:
  title: NINO API
  version: '1.0.0'
paths:
  /api/v1/healthcheck:
    get:
      summary: Healthcheck
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        "401":
          description: Error
  /oauth2/token:
    post:
      parameters:
        - in: header
          name: "content-type"
          schema:
            type: string
            example: "application/json"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user"
                password:
                  type: string
                  example: "password"
                client_id:
                  type: string
                  example: "client-id"
                client_secret:
                  type: string
                  example: "client-secret"
      responses:
        200:
          description: "HTTP Status 200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  issued_at:
                    type: string
                    pattern: "1724403176"
                  expires_in:
                    type: string
                    pattern: "1800"
                  token_type:
                    type: string
                    pattern: "Bearer"
                  access_token:
                    type: string
                    pattern: 'ey[A-Za-z0-9]{700}'
                  refresh_token:
                    type: string
                    pattern: '[0-9A-Za-z-]{30}'
        401:
          description: "HTTP Status 401"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                  success:
                    type: string
                    enum: false
  /v2/citizens/match:
    post:
      tags:
        - Person API
      description: POST `v2/citizens/match` returns GUID if the person can be matched.

      operationId: matchMDS
      parameters:
        - name: instigating-user-id
          in: header
          description: The id of the logged in user. 
          required: true
          deprecated: true
          schema:
            type: string
            maxLength: 40
            pattern: '^[a-zA-Z]([._-](?![._-])|@(?!@)|[a-zA-Z0-9]){1,38}[a-zA-Z0-9]$'
        - name: policy-id
          in: header
          description: The policy id as given to the consumer. 
          required: true
          schema:
            type: string
        - name: correlation-id
          in: header
          description: Session ID of the user's session.  Can be used for correlation
            of log entries if required.
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}'
        - name: context
          in: header
          description: Used to specify in which business context (application/process)
            the call is being made
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z]+[a-zA-Z0-9]*-+(\s?\-?[a-zA-Z0-9]+)+$'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestJSON'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                required:
                  - data
                type: object
                properties:
                  jsonapi:
                    $ref: '#/components/schemas/VersionObject'
                  data:
                    $ref: '#/components/schemas/UuidJSON'
        400:
          description: Bad Request.  The request is malformed or the body cannot be
            parsed/understood.  Please check request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        401:
          description: Unauthorized - invalid JWT token supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'

components:
  schemas:
    GenericResponse:
      type: object
      properties:
        id:
          type: integer
          example: 100
    Error:
      type: object
      required:
        - title
        - status
        - detail
      properties:
        type:
          type: string
          format: url
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        validation_errors:
          type: object
      additionalProperties: false
    ErrorData:
      description: a set of error codes and details received when trying to complete the required request.
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/JSONAPIErrorData'
    JSONAPIErrorData:
      description: Error details object complying to the JSON-API specification - see https://jsonapi.org/format/#error-objects
      type: object
      properties:
        id:
          type: string
        links:
          $ref: '#/components/schemas/JSONAPIErrorLinks'
        status:
          type: string
        code:
          type: string
        title:
          type: string
        detail:
          type: string
        source:
          $ref: '#/components/schemas/Source'
    JSONAPIErrorLinks:
      description: "A links object containing the following members: - about: a link that leads to further details about this particular occurrence of the problem."
      type: object
      properties:
        about:
          type: string
    Source:
      description: "an object containing references to the source of the error, optionally including any of the following members:
                        pointer: a JSON Pointer [RFC6901] to the associated entity in the request document
                        parameter: a string indicating which URI query parameter caused the error."
      type: object
      properties:
        pointer:
          type: string
        parameter:
          type: string
    VersionObject:
      description: Optional - Holds the JSON-API version used (currently only "1.0" is supported )
      type: object
      properties:
        version:
          type: string
    RequestJSON:
      type: object
      properties:
        jsonapi:
          $ref: '#/components/schemas/VersionObject'
        data:
          $ref: '#/components/schemas/MatchJSONData'
    MatchJSONData:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          default: Match
          example: Match
        attributes:
          required:
            - lastName
            - dateOfBirth
          type: object
          properties:
            dateOfBirth:
              description: The date of birth of the Person to be matched in 'yyyy-mm-dd' format
              type: string
              format: date
            ninoFragment:
              description: The last 4 characters of Person's National Insurance Number (not including the suffix)
              type: string
              maxLength: 4
              example: 4021
            firstName:
              description: The formal given name of the Person to be matched.
              type: string
              maxLength: 70
              example: Michael
            firstNameHistory:
              description: The historic given name(s) of the Person to be matched.
              type: array
              example: [ 'Michale', 'Alfred' ]
              items:
                type: string
            alternateName:
              description: The alternate name of the Person to be matched.
              type: string
              maxLength: 70
              example: John
            alternateNameHistory:
              description: The historic alternate name(s) of the Person to be matched.
              type: array
              example: [ 'Johny', 'Alfredo' ]
              items:
                type: string
            lastName:
              description: The last of family name of the Person to be matched.
              type: string
              maxLength: 35
              example: Clarke
            lastNameHistory:
              description: The historic last of family name(s) of the Person to be matched.
              type: array
              example: [ 'Pinto' ]
              items:
                type: string
            postcode:
              description: The current postcode of the Person as known to the department.
              type: string
              maxLength: 8
              example: NE6 1EA
            postcodeHistory:
              description: The historic postcode of the Person as last known to the department (may not be same as current address if
                recently moved)
              type: array
              example: [ 'NE1 1SE', 'NE7 7DP' ]
              items:
                type: string
            contactDetails:
              description: List of the contact Details of the Person to be matched. The contact details can be any phone number (business/home/personal) as known to the department or any email address as known to the department.
              type: array
              example: [ '07786557896', '03038975678', 'michael.clarke@example.com' ]
              items:
                type: string
    UuidJSON:
      type: object
      required:
        - id
        - type
      properties:
        id:
          description: The GUID returned for the Person.
          type: string
          maxLength: 64
        type:
          description: JSON-API type value will always be "MatchResult"
          type: string
          default: MatchResult
          example: MatchResult
        attributes:
          $ref: '#/components/schemas/MatchingAttributes'
    
    MatchingAttributes:
      description: additional matching attribute data.
      type: object
      properties:
        matchingScenario:
          description: The scenario applied that resulted in the successful match. This is only present for a successful single match.
          type: string
