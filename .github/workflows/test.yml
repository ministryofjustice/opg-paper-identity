name: "[Job] Test"

on:
  workflow_call:
    inputs:
      branch:
        description: "Branch"
        required: true
        type: string
      tag:
        description: "Tag"
        required: true
        type: string
    secrets:
      pact_broker_password:
        description: 'Password for central OPG pact broker'
        required: true
      codecov_token:
          description: 'token to upload to codecov'
          required: true

defaults:
  run:
    shell: bash

permissions:
  contents: write
  security-events: write
  checks: write

env:
  COMPOSE_FILE: docker-compose.yml

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        service_name: [api, front]
        suite: [phpcs, psalm, unit-test]
    runs-on: ubuntu-latest
    name: Run ${{ matrix.service_name }} "${{ matrix.suite }}" tests
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkout_tag }}
      - name: Set up Docker
        run: |
          echo '{"experimental": true, "features": { "containerd-snapshotter": true }}' | sudo tee -a /etc/docker/daemon.json
          sudo systemctl restart docker
          docker run --privileged --rm tonistiigi/binfmt --install all
      - uses: actions/download-artifact@v4
        with:
          path: /tmp/images
          name: ${{ matrix.service_name }}-test-multi-arch
      - name: Load ${{ matrix.service_name }} Test Image
        run: |
          docker load -i /tmp/images/${{ matrix.service_name }}-test-multi-arch.tar
      - name: Create test output dir
        run: |
          mkdir -m 0777 service-${{ matrix.service_name }}/build
      - name: Set version env var
        run: |
          if [ "${{ github.head_ref }}" == "" ]; then
              echo "PACT_CONSUMER_VERSION=${{github.sha}}" >> $GITHUB_ENV
          else
              echo "PACT_CONSUMER_VERSION=${{github.event.pull_request.head.sha}}" >> $GITHUB_ENV
          fi
      - name: Run Tests
        env:
          PACT_CONSUMER_BRANCH: ${{ inputs.branch }}
          PACT_CONSUMER_TAG: ${{ inputs.tag }}
          PACT_BROKER_PASSWORD: ${{ secrets.PACT_BROKER_PASSWORD }}
        run: |
          make ${{ matrix.service_name }}-${{ matrix.suite }}
      - name: Clean JUnit output
        if: always()
        run: |
          make -i clean-junit-output
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          comment_mode: off
          files: service-${{ matrix.service_name }}/build/*.xml
          test_file_prefix: +service-${{ matrix.service_name }}/
          check_name: ${{ matrix.service_name }} ${{ matrix.suite }} tests
      - name: service ${{ matrix.service_name }} codecov upload
        uses: codecov/codecov-action@v5
        if: matrix.suite == 'unit-test'
        with:
          name: paper-id-${{ matrix.service_name }}
          directory: ./service-${{ matrix.service_name }}/build
          fail_ci_if_error: false
          flags: paper-id-${{ matrix.service_name }}
          token: ${{ secrets.CODECOV_TOKEN }}
  cypress:
    name: Cypress Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker
        run: |
          echo '{"experimental": true, "features": { "containerd-snapshotter": true }}' | sudo tee -a /etc/docker/daemon.json
          sudo systemctl restart docker
          docker run --privileged --rm tonistiigi/binfmt --install all
      - uses: actions/download-artifact@v4
        with:
          name: api-multi-arch
          path: /tmp/images
      - uses: actions/download-artifact@v4
        with:
          name: front-multi-arch
          path: /tmp/images
      - uses: actions/download-artifact@v4
        with:
          name: api-test-multi-arch
          path: /tmp/images
      - uses: actions/download-artifact@v4
        with:
          name: front-test-multi-arch
          path: /tmp/images
      - uses: actions/download-artifact@v4
        with:
          name: dwp-mock-multi-arch
          path: /tmp/images
      - uses: actions/download-artifact@v4
        with:
          name: experian-crosscore-auth-mock-multi-arch
          path: /tmp/images
      - uses: actions/download-artifact@v4
        with:
          name: experian-crosscore-mock-multi-arch
          path: /tmp/images
      - uses: actions/download-artifact@v4
        with:
          name: experian-iiq-mock-multi-arch
          path: /tmp/images
      - uses: actions/download-artifact@v4
        with:
          name: yoti-mock-multi-arch
          path: /tmp/images
      - name: Load Images
        run: |
          docker load -i /tmp/images/api-test-multi-arch.tar
          docker load -i /tmp/images/front-test-multi-arch.tar
          docker load -i /tmp/images/api-multi-arch.tar
          docker load -i /tmp/images/front-multi-arch.tar
          docker load -i /tmp/imagesdwp-mock-multi-arch.tar
          docker load -i /tmp/imagesexperian-crosscore-auth-mock-multi-arch.tar
          docker load -i /tmp/imagesexperian-crosscore-mock-multi-arch.tar
          docker load -i /tmp/imagesexperian-iiq-mock-multi-arch.tar
          docker load -i /tmp/imagesyoti-mock-multi-arch.tar
      - name: Run cypress
        run: make cypress
      - name: Store screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: e2e-tests/cypress/screenshots
      - name: Write logs to file
        if: failure()
        run: docker compose logs > test.log
      - name: Store logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: logs
          path: test.log
