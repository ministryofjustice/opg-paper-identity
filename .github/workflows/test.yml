name: "[Job] Test"

on:
  workflow_call:
    inputs:
      branch:
        description: "Branch"
        required: true
        type: string
      tag:
        description: "Tag"
        required: true
        type: string
    secrets:
      pact_broker_password:
        description: 'Password for central OPG pact broker'
        required: true

defaults:
  run:
    shell: bash

permissions:
  contents: write
  security-events: write
  checks: write

env:
  COMPOSE_FILE: docker-compose.yml

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        service: [api, front]
        suite: [phpcs, psalm, unit-test]
    runs-on: ubuntu-latest
    name: Run ${{ matrix.service }} "${{ matrix.suite }}" tests
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkout_tag }}
      - uses: actions/download-artifact@v4
        with:
          name: image-${{ matrix.service }}-test
          path: /tmp/images
      - name: Load Image
        run: |
          docker load -i /tmp/images/${{ matrix.service }}-test.tar
      - name: Create test output dir
        run: |
          mkdir -m 0777 service-${{ matrix.service }}/build
      - name: Set version env var
        run: |
          if [ "${{ github.head_ref }}" == "" ]; then
              echo "PACT_CONSUMER_VERSION=${{github.sha}}" >> $GITHUB_ENV
          else
              echo "PACT_CONSUMER_VERSION=${{github.event.pull_request.head.sha}}" >> $GITHUB_ENV
          fi
      - name: Run Tests
        env:
          PACT_CONSUMER_BRANCH: ${{ inputs.branch }}
          PACT_CONSUMER_TAG: ${{ inputs.tag }}
          PACT_BROKER_PASSWORD: ${{ secrets.PACT_BROKER_PASSWORD }}
        run: |
          make ${{ matrix.service }}-${{ matrix.suite }}
      - name: Clean JUnit output
        if: always()
        run: |
          make -i clean-junit-output
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          comment_mode: off
          files: service-${{ matrix.service }}/build/*.xml
          test_file_prefix: +service-${{ matrix.service }}/
          check_name: ${{ matrix.service }} ${{ matrix.suite }} tests
  code_coverage:
    strategy:
      matrix:
        service: [api, front]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # pin@v3
      - name: download artifact for ${{ matrix.service }} tests
        uses: actions/download-artifact@v4.1.8
        continue-on-error: true
        with:
          name: service-${{ matrix.service }}
          path: service-${{ matrix.service }}
      - name: service ${{ matrix.service }} codecov upload
        uses: codecov/codecov-action@v5
        with:
          name: paper-id
          directory: ./service-${{ matrix.service }}
          fail_ci_if_error: false
          flags: paper-id-${{ matrix.service }}
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
  cypress:
    name: Cypress Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: image-api
          path: /tmp/images
      - uses: actions/download-artifact@v4
        with:
          name: image-front
          path: /tmp/images
      - uses: actions/download-artifact@v4
        with:
          name: image-api-test
          path: /tmp/images
      - uses: actions/download-artifact@v4
        with:
          name: image-front-test
          path: /tmp/images
      - name: Load Images
        run: |
          docker load -i /tmp/images/api-test.tar
          docker load -i /tmp/images/front-test.tar
          docker load -i /tmp/images/api.tar
          docker load -i /tmp/images/front.tar
      - name: Run cypress
        run: make cypress
      - name: Store screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: e2e-tests/cypress/screenshots
      - name: Write logs to file
        if: failure()
        run: docker compose logs > test.log
      - name: Store logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: logs
          path: test.log
