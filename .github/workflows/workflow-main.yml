name: "Main Workflow"

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  actions: read
  checks: write
  contents: write
  id-token: write
  pull-requests: write
  security-events: write

env:
  COMPOSE_FILE: docker-compose.yml

jobs:
  # generate a branch name
  branch_name:
    name: "Generate a safe branch name"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/data-parse-branch-name.yml@6bc0246b5cca2f4c85d06986c82a9a42643f6851 # v3.13.0

  # generate workspace name
  workspace_name:
    name: "Generate the workspace name"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/data-parse-workspace.yml@6bc0246b5cca2f4c85d06986c82a9a42643f6851 # v3.13.0

  # generate tag
  semver_tag:
    needs: [branch_name]
    name: "Generate the semver tag value"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/data-parse-semver-tag.yml@6bc0246b5cca2f4c85d06986c82a9a42643f6851 # v3.13.0
    with:
      branch_name: ${{ needs.branch_name.outputs.safe }}
    secrets: inherit

  # generate timestamp for images
  timestamp:
    needs: [semver_tag]
    runs-on: ubuntu-latest
    name: Set Timestamp
    steps:
      - id: timestamp
        run: echo "timestamp=$(date +"%Y%m%d%H%M%S")" >> "$GITHUB_OUTPUT"
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}

  build:
    name: Build and Scan
    uses: ./.github/workflows/build-scan.yml
    secrets:
      aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  test:
    name: Test
    needs: [branch_name, build, semver_tag]
    uses: ./.github/workflows/test.yml
    with:
      branch: ${{ needs.branch_name.outputs.branch_name }}
      tag: ${{ needs.semver_tag.outputs.tag }}
    secrets:
      pact_broker_password: ${{ secrets.PACT_BROKER_PASSWORD }}
      codecov_token:  ${{ secrets.CODECOV_TOKEN }}

  push:
    name: "ECR push"
    runs-on: ubuntu-latest
    needs: [build, test, workspace_name, semver_tag, timestamp]
    strategy:
      fail-fast: true
      matrix:
        include:
          - ecr_repository: paper-identity/api
            service_name: api
          - ecr_repository: paper-identity/front
            service_name: front
          - ecr_repository: paper-identity/dwp-mock
            service_name: dwp-mock
          - ecr_repository: paper-identity/experian-crosscore-auth-mock
            service_name: experian-crosscore-auth-mock
          - ecr_repository: paper-identity/experian-crosscore-mock
            service_name: experian-crosscore-mock
          - ecr_repository: paper-identity/experian-iiq-mock
            service_name: experian-iiq-mock
          - ecr_repository: paper-identity/yoti-mock
            service_name: yoti-mock
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Docker
        run: |
          echo '{"experimental": true, "features": { "containerd-snapshotter": true }}' | sudo tee -a /etc/docker/daemon.json
          sudo systemctl restart docker
          docker run --privileged --rm tonistiigi/binfmt --install all
      - uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          path: /tmp/images
          name: ${{ matrix.service_name }}-multi-arch
      - name: Load ${{ matrix.ecr_repository }} Image
        run: |
          docker load -i /tmp/images/${{ matrix.service_name }}-multi-arch.tar
      - uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367 # v1.0.7
      - name: Configure AWS Credentials With Assumed Role to Management
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/paper-identity-ci
          role-duration-seconds: 900
          role-session-name: OPGPaperIdentityGithubAction
      - name: ECR Login
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registries: 311462405659
      - name: Push & Tag
        env:
          SEMVER_TAG: ${{ needs.semver_tag.outputs.tag }}
          TIMESTAMP: ${{ needs.timestamp.outputs.timestamp }}
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.ecr_repository }}
        run: |
          docker tag ${{ steps.login_ecr.outputs.registry }}/${{ matrix.ecr_repository }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.SEMVER_TAG }}
          if ${{ github.ref == 'refs/heads/main' }}; then
            docker tag ${{ steps.login_ecr.outputs.registry }}/${{ matrix.ecr_repository }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:main-${{ env.SEMVER_TAG }}
            docker tag ${{ steps.login_ecr.outputs.registry }}/${{ matrix.ecr_repository }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:main-${{ env.SEMVER_TAG }}-${{ env.TIMESTAMP }}
            docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          else
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.SEMVER_TAG }}
          fi

  push-tags:
    runs-on: ubuntu-latest
    needs: [semver_tag, push]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::997462338508:role/paper-identity-ci
          role-duration-seconds: 900
          role-session-name: OPGPaperIdentityGithubAction

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367 # v1.0.7

      - name: Push Tag to Parameter Store
        run: |
          aws ssm put-parameter --name "opg-paper-identity-latest-green-build" --type "String" --value "${{ needs.semver_tag.outputs.tag }}" --overwrite --region=eu-west-1

      - name: Trigger Dev Deploy
        shell: bash
        run: curl -u ${{ secrets.JENKINS_API_USER }}:${{ secrets.JENKINS_API_TOKEN }} "https://${{ secrets.JENKINS_URL }}/job/Sirius/job/Deploy_to_Development/build?token=${{ secrets.JENKINS_API_TOKEN_NAME }}&cause=Triggered+by+opg-paper-identity"

  end:
    name: 'End of workflow'
    runs-on: 'ubuntu-latest'
    needs: [branch_name, workspace_name, semver_tag, test, push]
    steps:
      - name: "End"
        run: |
          echo "Done"
